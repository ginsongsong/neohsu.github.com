<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Learn Or Die]]></title>
  <link href="http://NeoHsu.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://NeoHsu.github.io/"/>
  <updated>2014-02-04T23:52:30+08:00</updated>
  <id>http://NeoHsu.github.io/</id>
  <author>
    <name><![CDATA[Neo Hsu]]></name>
    <email><![CDATA[NeoHsuDroid@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HowTo: ListView Optimization About Custom Adapter and Layout]]></title>
    <link href="http://NeoHsu.github.io/blog/2013/12/13/howto-listview-optimization-about-custom-adapter-and-layout/"/>
    <updated>2013-12-13T23:08:46+08:00</updated>
    <id>http://NeoHsu.github.io/blog/2013/12/13/howto-listview-optimization-about-custom-adapter-and-layout</id>
    <content type="html"><![CDATA[<p>Adapter 的作用就是 ListView 與資料之間的橋樑，當 ListView 中每一個 Item 顯示到螢幕上時，都會調用 Adapter 的 getView 方法返回一個View，因此當 ListView 在處理 Scroll 事件時，會反覆的調用 getView 方法去顯示頁面，使頁面不斷的重複建立相同的 View ，因此會產生記憶體不足而導致閃退或是滾動不夠順暢的狀況；由此可見我們應該要在調用 getView 方法時做些優化，以增進 ListView 的效能</p>

<p>ListView 優化的思路整理以下兩種：</p>

<ol>
<li>View 的重復使用：<br/>
View 每次創建是比較耗費時間的動作，因此對於 getView 方法傳入的 converView 應該充分利用 Null 的判斷</li>
<li>ViewHolder 的應用：<br/>
View 在調用 findViewById 方法也是比較耗時的，因此需要考慮只調用一次，之後就調用 View.getTag 方法來取得 ViewHolder 物件</li>
</ol>


<h2>BaseAdapter Example</h2>

<p>繼承 BaseAdapter 之後需要重寫四個方法：getCount，getItem，getItemId 和 getView</p>

<ol>
<li><p>BaseAdapter 一開始會先調用 getCount 來計算將會顯示的 Item 數，因此我們需先回傳該值
<pre class="prettyprint java">
@Override
public int getCount() {
   // TODO Auto-generated method stub
   return rowItems.size();
}
</pre></p></li>
<li><p>為了反覆取用之前已建立過的 View，我們利用 ViewHolder 保存已建立的 View；這邊可以存取 Item 中所顯示的元件
<pre class="prettyprint java">
private class ViewHolder {
   ImageView imageView;
   TextView txtTitle;
   TextView txtDesc;
}
</pre></p></li>
<li><p>當 BaseAdapter 調用 getView 時，我們可以從 converView 中確認 View 是否存在，如果存在則從 ViewHolder 中取出，如果未存在則建立新的 View 並設定 tag 記錄已建立過；當指定好 Holder 後，便利用 Holder 去執行所需要的配置與相對應的事件了
<pre class="prettyprint java">
@Override
public View getView(int position, View convertView, ViewGroup parent) {
   // TODO Auto-generated method stub
   ViewHolder holder = null;</p>

<p>   LayoutInflater mInflater = (LayoutInflater) context.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
   if(convertView == null){
      convertView = mInflater.inflate(R.layout.list_item, null);
      holder = new ViewHolder();
      holder.txtDesc = (TextView) convertView.findViewById(R.id.desc);
      holder.txtTitle = (TextView) convertView.findViewById(R.id.title);
      holder.imageView = (ImageView) convertView.findViewById(R.id.icon);
      convertView.setTag(holder);
   }else{
      holder = (ViewHolder) convertView.getTag();
   }</p>

<p>   RowItem rowItem = (RowItem) getItem(position);</p>

<p>   holder.txtDesc.setText(rowItem.getDesc());
   holder.txtTitle.setText(rowItem.getTitle());
   holder.imageView.setImageResource(rowItem.getImageId());</p>

<p>   return convertView;
}
</pre></p></li>
</ol>


<blockquote><p>BaseAdapter 完整範例的原始碼 <a href="https://github.com/NeoHsu/CustomListViewWithBaseAdapter">GitHub &ndash; NeoHsu/CustomListViewWithBaseAdapter</a></p></blockquote>

<h2>CursorAdapter Example</h2>

<p></p>


<p>使用 CursorAdapter 只需要重寫兩個方法：newView，bindView；CursorAdapter 和 BaseAdapter 有些許的不同，因為 BaseAdapter 主要是調用 getView 方法去建立與判斷 View 是否存在，而 CursorAdapter 有兩種方式： newView 和 bindView 可以被調用，newView 主要負責建立 View ， bindView 則是負責處理建立好的 View ，且由於 CursorAdapter 的資料是屬於動態綁定，因此對於建立好的 View 它並不會重新再建立一次，而是藉由 bindView 去對應資料與配置，與 BaseAdapter 運作方式有些許不同但實作的原理是相同的</p>

<p><div><script src='https://gist.github.com/7972655.js?file=ContactAdapterForCursor.java'></script>
<noscript><pre><code>class ContactAdapter extends CursorAdapter {
  private LayoutInflater mInflater;
  
  public ContactAdapter(Context context, Cursor c) {
    super(context, c);
    mInflater = LayoutInflater.from(context);	
  }

  @Override
  public void bindView(View view, Context context, Cursor cursor) {
    ViewHolder holder = (ViewHolder)view.getTag();
    holder.name.setText(cursor.getString(holder.nameIndex));
    holder.number.setText(cursor.getString(holder.numberIndex));
  }

  @Override
  public View newView(Context context, Cursor cursor, ViewGroup parent) {
    View view = mInflater.inflate(R.layout.contactlist_row, parent, false);
    ViewHolder holder = new ViewHolder();
    holder.name = (TextView)view.findViewById(R.id.name);
    holder.number = (TextView)view.findViewById(R.id.number);
    holder.nameIndex = cursor.getColumnIndex(&quot;contact_name&quot;);
    holder.numberIndex = cursor.getColumnIndex(&quot;contact_number&quot;);
    view.setTag(holder);
    return view;	
  }

  private static class ViewHolder {
    int nameIndex;
    int numberIndex;
    TextView name;
    TextView number;
  }
}</code></pre></noscript></div>
</p>

<h2>Summary</h2>

<p>增加 ListView 效能的主要方式不外乎是減少 View 的建立與重複的使用已建立過的物件；由於 CursorAdapter 屬於動態資料綁定，因此當資料做修正後，並不需要去更新 Adapter 的對應；BaseAdapter 則需更新完資料後，調用 notifyDataSetChanged 方法才能更新 ListView</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talk About ListView Adapter on Android]]></title>
    <link href="http://NeoHsu.github.io/blog/2013/12/12/talk-about-listview-and-adapter-on-android/"/>
    <updated>2013-12-12T23:02:24+08:00</updated>
    <id>http://NeoHsu.github.io/blog/2013/12/12/talk-about-listview-and-adapter-on-android</id>
    <content type="html"><![CDATA[<p>在 Android 開發過程中，ListView 和 Adapter 有著密不可分的關係；Adapter 主要負責 Data 和 ListView 之間資料配置與 Layout 佈局的媒介，因此在實作 Custom ListView 時，常會針對 Adapter 組件去做客製化的設計；下面將介紹 Adapter 和 ListView 之間的運作原理並說明不同資料形態的 Adapter 運作模式</p>

<p></p>


<h1>ListView &amp; Adapter</h1>

<p><img src="/images/SVG/0-talk-about-listview-and-adapter-on-android.png"></p>

<p>一般而言 ListView 是由以下三個元素所组成，</p>

<ol>
<li>View：<br/>
用來顯示 ListView 中每一個 Item 所要呈現的配置</li>
<li>Adapter：<br/>
將不同的資料對應到 View 中，不同的資料使用不同的 Adapter 去做對應，如 ArrayAdapter，CursorAdapter，SimpleAdapter 等，Adapter 會將資料對應到 ListView Item 的 View 中來呈現資料</li>
<li>Data：<br/>
Adapter 所需要對應的資料來源，資料形態可以是字串或圖片，儲存資料的媒介可以是 ArrayList 或 Cursor 並透過 Adapter 將資料放到 Item 中；所有的資料會顯示到 ListView 上都是透過 Adapter 來完成</li>
</ol>


<p>根據上圖我們可以知道當使用 ListView 時，我們會先將要放入 ListView 的資料丟入 Adapter 中， Adapter 透過 XML 中 Layout 的佈局去配置每個 Item 的樣式與資料，最後再將配置好的佈局放入 ListView 中呈現出我們所設定的樣式；事實上系統已有預設的 Adapter 可以運用，但有時候並不能滿足我們的需求，因此要實現複雜的 ListView 可以透過繼承 Adapter 並重寫相對應的方法即可；以下將介紹一下透過不同 Adapter 的運作過程</p>

<p></p>


<h1>BaseAdapter &amp; CursorAdapter</h1>

<p>我們知道如果要實作較為複雜的 ListView 需要去針對 Adapter 去做修改；以下將介紹透過不同 Adapter 去操控 ListView 的運作過程</p>

<blockquote><p>BaseAdapter：通用的Adapter 讓你可以處理任何你想要的動作，但是必須做更多的編碼去處理相對應事件</p>

<p>ArrayAdapter：BaseAdapter 的擴展，它可以用在資料形態為 ArrayList 的情況</p>

<p>CursorAdapter：BaseAdapter 的擴展，主要用於當資料形態是 Cursor 的情況</p></blockquote>

<h2>BaseAdapter</h2>

<p><img src="/images/SVG/1-talk-about-listview-and-adapter-on-android.svg"></p>

<p>根據上圖我們可以知道 BaseAdapter 的運作模式，當 ListView 受到 Scroll 事件響應的時候，ListView 會先調用 getCount 去和後端資料取得 Item 個數，並調用 getView 方法去繪製每個要呈現的 Item View ；如果要取得某一列的內容就會調用 getItem 這個方法；如要取得某一列的 Id 就可以調用 getItemId 方法去實現</p>

<h2>CursorAdapter</h2>

<p><img src="/images/SVG/2-talk-about-listview-and-adapter-on-android.svg"></p>

<p>由上圖可以看出使用 CursorAdapter 時，當 ListView 產生 Scroll 事件後，會去取得目前 Cursor 位置，如果顯示的 Item 需要被繪製 View 的時候，會調用 newView 去繪製 Item ，如果不需要重新繪製則調用 bindView 去做顯示的動作</p>

<p>因此我們可以知道在 CursorAdapter 中 ListView 不是每次都會調用 newView ，所以每個 Item View 只會被實體化一次。而每次要繪製 Item 之前一定會調用 bindView ；如果記錄被修改了在 ListView 中也會被更新，這種方式是動態綁定資料。如果要實現資料的延遲加載，可以在 bindView 中先加載資料，再啟動 Thread 更新資料</p>

<h2>Summary</h2>

<p>由上面我們可以知道整個 ListView &amp; Adaper 呈現的運作模式與相互關係，在這邊我們可以發現其實在整個 Adapter 的做法中，當我們不斷地在進行 Scroll 動作時，它會不斷地調用 getView 的動作，導致系統不斷的建立 View ，不斷的將畫面繪製在螢幕上，因此會導致手機的暫存空間不足導致程式閃退問題</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Talk About View Component on Android]]></title>
    <link href="http://NeoHsu.github.io/blog/2013/12/11/talk-about-view-component-on-android/"/>
    <updated>2013-12-11T22:51:29+08:00</updated>
    <id>http://NeoHsu.github.io/blog/2013/12/11/talk-about-view-component-on-android</id>
    <content type="html"><![CDATA[<p><img src="/images/SVG/1-talk-about-view-component-on-android.svg"></p>

<p>在 Android 開發中，我認為了解 View 的執行過程有助於提高介面呈現的效率，可以幫助一些複雜 Layout 在適當的時機中處理，或是可以減少不必要的畫面重製，這些都是對於 View 的執行過程有很大的關聯</p>

<p>Android 中 View 的呈現主要經過 Mesure, Layout 和 Draw 這三個過程：</p>

<h2>Mesure</h2>

<p>此階段主要是負責計算 view 佔用的大小，簡單的說就是將 match_parent 和 wrap_content 轉成目前顯示的實際大小；透過 onMeasure(widthMeasureSpec, heightMeasureSpec) 方法去處理計算 View 在目前螢幕上顯示的區塊大小</p>

<blockquote><p>View 的大小是有 Parent View 和自己的大小决定而不是單一個 View 來决定，因此需要配合自己的 Sub-View 去做計算調整</p></blockquote>

<h2>Layout</h2>

<p>當 View 配置好大小後，便讀取設定好的 Layout 配置，將 Layout 佈局放到建立好的 View 中並計算出 View 在螢幕上的座標；透過 onLayout(int l, int t, int r, int b )方法去處理</p>

<blockquote><p>處理組件的佈局通常要重寫 onMesure 和 onLayout 這兩個方法</p></blockquote>

<h2>Draw</h2>

<p>Draw 過程中主要是先畫 Drawable 背景，需注意的是背景 Drawable 的實際大小會影響 View 的大小； Draw 過程會調用 onDraw(Canvas canvas) 方法去繪製背景，之後再透過 dispatchDraw(Canvas canvas) 方法分發給 Sub-View 進行繪製，值得注意的是 ViewGroup 在繪製時，如果它沒有背景則直接調用的是 dispatchDraw() 方法，繞過了 draw() 方法，當它有背景的時候就調用 draw() 方法，而 draw() 方法裡包含了 dispatchDraw() 方法的調用</p>

<blockquote><p>自定組件時通常是重寫 onDraw() 方法，而在 ViewGroup 上繪製東西的時候往往重寫的是 dispatchDraw() 方法</p></blockquote>

<h2>Summary</h2>

<p>Android 中所有畫面都是用 Canvas 根據座標去畫出來的結果，因此每次當 View 改變的時候，需要再去重新計算與繪製一個 View 來產生出畫面來</p>

<p>可想而知在 ListView 中，我們不斷地 onScroll 時，如果沒做一些效能處理與緩存的處理，它的運作模式將會是不斷地重新繪製畫面；因為當每次移動 Scroll 時都會進行 getView 的動作，之後便開始一連串產生 View 的行為</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Error : ADB Server Didn't ACK on Windows]]></title>
    <link href="http://NeoHsu.github.io/blog/2013/11/28/solve-adb-server-didnt-ack-on-windows/"/>
    <updated>2013-11-28T23:40:27+08:00</updated>
    <id>http://NeoHsu.github.io/blog/2013/11/28/solve-adb-server-didnt-ack-on-windows</id>
    <content type="html"><![CDATA[<h1>Outline</h1>

<p>產生ADB Server didn&rsquo;t ACK 問題的主要原因為 ADB Server 的 Port 绑定失败，因此只需要關閉 Adb Server 所需綁定的 Port 上佔用的程序即可；我是在使用 Windows 系統時，自動啟動的 QQ 即時通訊軟體使 ADB Server 需綁定的 Port 被佔用，因此產生此問題</p>

<p></p>


<h2>Quit Eclipse &amp; Open Command Line</h2>

<p>關閉 Eclipse 使 android 的 adb與Eclipse 間的連結關閉，並打開 commad line ，切換目錄到 Android SDK 目錄中 platform-tools 資料夾裡</p>

<blockquote><p>切換到 platform-tools 資料夾中是為了使用 adb 工具，如果有有將 platform-tools 資料夾路徑加到環境變數中可以不需要切換</p></blockquote>

<p><div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>&nbsp;</span></pre></td><td class='code'><pre><code><span class='line command'>D:\Application\adt-bundle-windows\sdk\platform-tools > dir</span><span class='line output'>NOTICE.txt  adb  api  fastboot  source.properties  systrace</span></code></pre></td></tr></table></div></div>
        </div></p>

<h2>Turn Off ADB Server &amp; Turn On ADB Server Again</h2>

<p>關閉並重新啟動 ADB Server
<div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span></pre></td><td class='code'><pre><code><span class='line command'>adb kill-server</span><span class='line command'>adb start-server</p></span><span class='line output'>
</span><span class='line output'><h1>啟動服務成功顯示畫面如下</h1>
</span><span class='line output'>
</span><span class='line output'><ul>
</span><span class='line output'><li>daemon not running. starting it now on port 5037 *</li>
</span><span class='line output'><li>daemon started successfully *
</span><span class='line output'>
</span><span class='line output'><h1>啟動服務失敗顯示畫面如下</h1></li>
</span><span class='line output'><li>daemon not running. starting it now *</li>
</span><span class='line output'><li>ADB server didn&rsquo;t ACK *</li>
</span><span class='line output'><li>failed to start daemon *</span></code></pre></td></tr></table></div></div>
        </div></li>
</ul>


<h2>IF Failed To Start ADB Server</h2>

<p>如果前面步驟還沒成功啓動 ADB Server ，則需要查詢有哪些程序佔用了 ADB Server 的 port</p>

<blockquote><p>ADB Server 預設Port爲5037</p></blockquote>

<p><div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span></pre></td><td class='code'><pre><code><span class='line command'>netstat -ano | findstr &ldquo;5037&rdquo;</span><span class='line output'>TCP    127.0.0.1:1159         127.0.0.1:5037         ESTABLISHED     2492
</span><span class='line output'>TCP    127.0.0.1:5037         0.0.0.0:0              LISTENING       2796
</span><span class='line output'>TCP    127.0.0.1:5037         127.0.0.1:1159         ESTABLISHED     2796
</span><span class='line output'>TCP    127.0.0.1:5037         127.0.0.1:1349         TIME_WAIT       0
</span><span class='line output'>TCP    127.0.0.1:5037         127.0.0.1:1350         TIME_WAIT       0
</span><span class='line output'>TCP    127.0.0.1:5037         127.0.0.1:1353         TIME_WAIT       0</span></code></pre></td></tr></table></div></div>
        </div></p>

<h2>Kill Task &amp; Start ADB Server</h2>

<p>如果有查詢到佔用的 5037 port 的 Task，則用 taskkill 指令根據 PID 刪除它；並重新啟動 ADB Server
<div class="window">
          <nav class="control-window">
            <a href="#finder" class="close" data-rel="close">close</a>
            <a href="#" class="minimize">minimize</a>
            <a href="#" class="deactivate">deactivate</a>
          </nav>
          <h1 class="titleInside">Terminal</h1>
          <div class="container"><div class="terminal"><table><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>$</span>
<span class='line-number'>&nbsp;</span>
<span class='line-number'>&nbsp;</span></pre></td><td class='code'><pre><code><span class='line command'>taskkill /F /PID 2796</span><span class='line command'>taskkill /F /PID 2492</span><span class='line command'>adb start-server</span><span class='line output'>* daemon not running. starting it now on port 5037 *
</span><span class='line output'>* daemon started successfully *</span></code></pre></td></tr></table></div></div>
        </div></p>
]]></content>
  </entry>
  
</feed>
